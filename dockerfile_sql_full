# Use the official SQL Server container image (includes sqlcmd)
FROM mcr.microsoft.com/mssql/server:latest

# Set environment variables for non-interactive installations
ENV DEBIAN_FRONTEND=noninteractive

# Install dependencies (curl, apt-utils) & Azure CLI
RUN apt-get update && apt-get install -y \
    curl \
    apt-transport-https \
    gnupg2 && \
    curl -sL https://aka.ms/InstallAzureCLIDeb | bash && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Set environment variables for Azure SQL authentication
ENV APP_ID="your-app-id"
ENV CLIENT_SECRET="your-client-secret"
ENV TENANT_ID="your-tenant-id"
ENV SQL_SERVER="your-sql-server.database.windows.net"
ENV DATABASE="your-database-name"

# Define the SQL query to run
ENV SQL_QUERY="SELECT TOP 10 * FROM your_table_name;"

# Use an explicit entrypoint with bash
ENTRYPOINT ["/bin/bash", "-c"]

# The command to execute inside the container
CMD ["az login --service-principal -u \"$APP_ID\" -p \"$CLIENT_SECRET\" --tenant \"$TENANT_ID\" > /dev/null 2>&1 && \
      echo \"Fetching Azure AD access token...\" && \
      TOKEN=$(az account get-access-token --resource https://database.windows.net --query accessToken --output tsv) && \
      if [ -z \"$TOKEN\" ]; then \
          echo \"Failed to retrieve access token.\" && \
          exit 1; \
      fi && \
      echo \"Running SQL Query...\" && \
      sqlcmd -S \"$SQL_SERVER\" -d \"$DATABASE\" -U \"$APP_ID\" -G -P \"$TOKEN\" -Q \"$SQL_QUERY\" && \
      echo \"SQLCMD execution completed.\""]

#usage:
#docker run --rm -e SQL_QUERY="SELECT COUNT(*) FROM Users;" sql-aad-auth

