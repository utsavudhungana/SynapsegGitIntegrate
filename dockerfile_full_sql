# Use the latest Ubuntu image
FROM ubuntu:latest

# Set environment variables for non-interactive installations
ENV DEBIAN_FRONTEND=noninteractive
ENV ACCEPT_EULA=Y

# Define default environment variables (can be overridden at runtime)
ENV MSSQL_SA_PASSWORD="YourStrong!Passw0rd"
ENV MSSQL_PID=Developer
ENV DATABASE_NAME="TestDB"
ENV DB_USER="testuser"
ENV DB_PASSWORD="Test@1234"

# Azure AD credentials (override at runtime)
ENV AAD_APP_ID="your-app-id"
ENV AAD_CLIENT_SECRET="your-client-secret"
ENV AAD_TENANT_ID="your-tenant-id"
ENV SQL_SERVER="your-sql-server.database.windows.net"
ENV SQL_QUERY="SELECT GETDATE();"  # Default test query
ENV QUERY_LOG="/var/log/sql_query.log"

# Install dependencies: curl, jq, Microsoft packages
RUN apt-get update && apt-get install -y \
    curl \
    apt-transport-https \
    gnupg2 \
    software-properties-common \
    wget \
    jq \
    sudo

# Install Microsoft SQL Server
RUN curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | apt-key add - && \
    add-apt-repository "$(curl -fsSL https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/mssql-server-2019.list)" && \
    apt-get update && apt-get install -y mssql-server && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Install Microsoft SQL Tools (Go-based sqlcmd)
RUN curl -fsSL https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/prod.list | tee /etc/apt/sources.list.d/mssql-release.list && \
    apt-get update && ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev && \
    echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Install Azure CLI
RUN curl -sL https://aka.ms/InstallAzureCLIDeb | bash

# Ensure logs directory exists
RUN mkdir -p /var/log && touch $QUERY_LOG

# Set up SQL Server, create database, user, log in to Azure, and run queries
CMD (/opt/mssql/bin/sqlservr & \
    echo "Waiting for SQL Server to start..." && sleep 20 && \
    echo "Creating database and user..." && \
    /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "$MSSQL_SA_PASSWORD" -Q "CREATE DATABASE [$DATABASE_NAME];" && \
    /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "$MSSQL_SA_PASSWORD" -Q "CREATE LOGIN [$DB_USER] WITH PASSWORD = '$DB_PASSWORD';" && \
    /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "$MSSQL_SA_PASSWORD" -Q "USE [$DATABASE_NAME]; CREATE USER [$DB_USER] FOR LOGIN [$DB_USER]; ALTER ROLE db_owner ADD MEMBER [$DB_USER];" && \
    echo "Database and user created successfully!" && \
    echo "Logging in to Azure..." && \
    az login --service-principal -u "$AAD_APP_ID" -p "$AAD_CLIENT_SECRET" --tenant "$AAD_TENANT_ID" > /dev/null 2>&1 && \
    echo "Fetching Azure AD token..." && \
    TOKEN=$(az account get-access-token --resource https://database.windows.net --query accessToken --output tsv) && \
    if [ -z "$TOKEN" ]; then \
        echo "Failed to retrieve Azure AD token." && exit 1; \
    fi && \
    echo "Running SQL Queries..." && \
    echo "$SQL_QUERY" | tr ';' '\n' | while read QUERY; do \
        if [ -n "$QUERY" ]; then \
            echo "Executing: $QUERY" | tee -a $QUERY_LOG; \
            /opt/mssql-tools/bin/sqlcmd -S "$SQL_SERVER" -d "$DATABASE_NAME" -U "$AAD_APP_ID" -G -P "$TOKEN" -Q "$QUERY" 2>&1 | tee -a $QUERY_LOG; \
        fi; \
    done && \
    echo "SQL query execution completed. Logs saved in $QUERY_LOG" && \
    tail -f /dev/null)
